import { describe, it } from 'mocha';
import { expect } from "chai";
import {ChessBoard, isValidChessBoard, checkAttack} from "../src/ejercicio03"

describe('checkAttack', () => {
  it('should return undefined for invalid chess board', () => {
    const invalidBoard: ChessBoard = [      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-'], // fila incompleta
      ['-', '-', '-', '-', '-', '-', '-', '-'],
    ];
    expect(checkAttack(invalidBoard)).equal(undefined);
  });

  it('should return undefined if there are no queens on the board', () => {
    const boardWithoutQueens: ChessBoard = [      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
    ];
    expect(checkAttack(boardWithoutQueens)).equal(undefined);
  });

  it('should return true if queens are in the same row', () => {
    const board: ChessBoard = [      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', 'B', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', 'N', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
    ];
    expect(checkAttack(board)).equal(true);
  });

  it('should return true if queens are in the same column', () => {
    const board: ChessBoard = [      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', 'B', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', 'N', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
    ];
    expect(checkAttack(board)).equal(true);
  });

  it('should return true if queens are in the same diagonal', () => {
    const board: ChessBoard = [      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', 'B', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', 'N', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
    ];
    expect(checkAttack(board)).equal(true);
  });

  it('should return false if queens cannot attack each other', () => {
    const board: ChessBoard = [      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', 'B', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', 'N'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-']
    ];
    expect(checkAttack(board)).equal(false);
  });


  it('returns undefined when there are two black queens', () => {
    const board: ChessBoard = [      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', 'B', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', 'N', '-', '-', 'B'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
    ];
    expect(checkAttack(board)).equal(undefined);
  });
    
  it('returns undefined when there are two white queens', () => {
    const board: ChessBoard = [      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', 'N', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', 'B', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', 'B', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
    ];
    expect(checkAttack(board)).equal(undefined);
  });
    
  it('returns undefined when there is only the black queen', () => {
    const board: ChessBoard = [      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', 'N', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
    ];
    expect(checkAttack(board)).equal(undefined);
  });

  it('returns undefined when there is only the white queen', () => {
    const board: ChessBoard = [      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', 'B', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
    ];
    expect(checkAttack(board)).equal(undefined);
  });
});